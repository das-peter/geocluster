<?php

require_once 'geocluster.geohash.inc';

/**
 * @file
 * Geocluster extension for geofield and maps.
 */

/**
 * Implements hook_views_api().
 */
function geocluster_views_api() {
  return array(
    'api' => '3',
  );
}

/**
 * Invokes clustering after the views query has been executed.
 *
 * Implements hook_views_post_execute_query().
 */
function geocluster_views_post_execute_query(&$view) {
  if ($cluster = geocluster_get_instance($view)) {
    $cluster->cluster($view);
  };
}

/**
 * Adds geocluster information to a views_geojson result.
 *
 * Implements hook_views_geojson_render_fields_alter().
 */
function geocluster_views_geojson_render_fields_alter(&$feature, $view, $row, $index) {
  if (!empty($row->clustered)) {
    $feature['clustered'] = TRUE;
    $feature['cluster_items'] = $row->geocluster_count;
  }
}

/**
 * Implements theme_preprocess_leaflet_map().
 */
function geocluster_preprocess_leaflet_map($variables) {
  drupal_add_js(
    drupal_get_path('module', 'geocluster') . '/js/geocluster.leaflet.marker.js',
    // Add our script after leaflet.drupal.js.
    array('weight' => 5)
  );
}

/**
 * Retrieves the geocluster instance from a given view.
 *
 * @param $view view
 */
function geocluster_get_instance(&$view) {
  if (isset($view->display_handler->extender['geocluster'])) {
    return $view->display_handler->extender['geocluster']->get_option('geocluster_instance');
  }
}

/*** INTERNAL HELPERS ***/

/**
 * Implements hook_leaflet_geojson_bean_view_features_alter().
 */
function geocluster_leaflet_geojson_bean_view_features_alter(array &$features, array &$context) {
// Add geocluster bbox extension js.
  if (isset($context['source_info']['bbox'])) {
    drupal_add_js(
      drupal_get_path('module', 'geocluster') . '/js/geocluster.leaflet.bbox.js',
      array(
        // Add our script after leaflet.bbox.js.
        'weight' => 10
      )
    );
  }
}
