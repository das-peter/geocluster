<?php

/**
 * @file
 * Geocluster extension for geofield and maps.
 */

/**
 * Diameter of the Earth in kilometers.
 */
define('GEOCLUSTER_GEOHASH_LENGTH', 12);

/**
 * Implements hook_views_api().
 */
function geocluster_views_api() {
  return array(
    'api' => '3',
  );
}

/**
 * Invokes clustering after the views query has been executed.
 *
 * Implements hook_views_post_execute_query.
 */
function geocluster_views_post_execute_query(&$view) {

  foreach ($view->field as $key => $my_field) {
    if ($my_field->definition['handler'] == 'geocluster_handler_field_geofield') {
      $field = $my_field;
    }
  }
  if (!isset($field)) {
    return;
  }

  $cluster_distance = $field->options['cluster_distance'];

  // @todo: Implement bbox logic and calculate zoom from bbox.

  // Default zoom
  $zoom = 7;
  switch ($view->style_plugin->plugin_name) {
    case 'leaflet':
      $map = $view->style_plugin->options['map'];
      $info =  leaflet_map_get_info($map);
      $zoom = $info['settings']['zoom'];
      break;
    case 'views_geojson':
      break;
    case 'geofield_map':
      $style_options = $view->display_handler->display->display_options['style_options'];
      $zoom = $style_options['geofield_map_zoom'];
  }

  // Allow to override using get paramters for debugging purposes.
  $zoom = isset($_GET['zoom']) ? $_GET['zoom'] : $zoom;
  $cluster_distance = isset($_GET['cluster_distance']) ? $_GET['cluster_distance'] : $cluster_distance;
  $cluster = new Geocluster($cluster_distance, $zoom, $field);
  $cluster->cluster($view);
}

/**
 * Adds geocluster information to a leaflet data item.
 *
 * Implements hook_leaflet_views_alter_points_data.
 */
function geocluster_leaflet_views_alter_points_data($result, &$points) {
  if (isset($result->clustered)) {
    // Add cluster info to every points data entry.
    array_walk($points, function(&$point, $key, $count) {
      $point['clustered'] = TRUE;
      $point['cluster_items'] = $count;
    }, count($result->ids));
  }
}

function geocluster_add_geojson_cluster_info(&$feature, $cluster_items) {
  $feature['clustered'] = TRUE;
  $feature['cluster_items'] = $cluster_items;
}

function geocluster_views_geojson_render_fields_alter(&$feature, $view, $row, $index) {
  if (!empty($row->clustered)) {
    geocluster_add_geojson_cluster_info($feature, count($row->ids));
  }
}

function geocluster_preprocess_leaflet_map($variables) {
  drupal_add_js(
    drupal_get_path('module', 'geocluster') . '/js/geocluster.leaflet.marker.js',
    // Add our script after leaflet.drupal.js.
    array('weight' => 5)
  );

  drupal_add_js(
    drupal_get_path('module', 'geocluster') . '/js/geocluster.leaflet.js',
    // Add our script after leaflet.drupal.js.
    array('weight' => 5)
  );
}

/**
 * Add geohash property for all geofields.
 *
 * Implements hook_entity_property_info_alter().
 */
function geocluster_entity_property_info_alter(&$info) {
  foreach ($info as &$entity_type) {
    geocluster_geofield_add_geohash_property($entity_type);
    if (isset($entity_type['bundles'])) {
      foreach ($entity_type['bundles'] as &$bundle) {
        geocluster_geofield_add_geohash_property($bundle);
      }
    }
  }
}

/**
 * Helper function that adds geohash property for a geofield.
 */
function geocluster_geofield_add_geohash_property(&$value) {
  if (isset($value['properties'])) {
    foreach ($value['properties'] as &$property) {
      if (isset($property['type']) && $property['type'] == 'geofield') {
        $property['property info']['geohash'] = array(
          'label' => t('Geohash'),
          'type' => 'string',
          'description' => t('Returns the location as geohash'),
          'getter callback' => 'geocluster_geofield_geohash_property_get_callback',
          'computed' => TRUE,
        );

        // We don't use the index array,
        // as group.facet for multivalued is only SOLR 4.0
        // see http://wiki.apache.org/solr/FieldCollapsing
        /*
        $property['property info']['geohash_geocluster_index'] = array(
          'label' => t('Geohash geocluster index'),
          'type' => 'list<string>',
          'description' => t('Returns the location as geohash'),
          'getter callback' => 'geocluster_geofield_geohash_geocluster_index_property_get_callback',
          'computed' => TRUE,
        );
        */

        for ($i = GEOCLUSTER_GEOHASH_LENGTH; $i > 0; $i--) {
          $property['property info']['geohash_geocluster_index_' . $i] = array(
            'label' => t('Geohash geocluster index ' . $i),
            'type' => 'string',
            'description' => t('Returns the location as geohash with length ' . $i),
            'getter callback' => 'geocluster_geofield_geohash_geocluster_index_property_get_callback',
            'geohash length' => $i,
            'computed' => TRUE,
          );
        }
      }
    }
  }
}

/**
 * Getter callback for a geofield geohash property.
 */
function geocluster_geofield_geohash_property_get_callback($entity, array $options, $name, $type, $info) {
  geophp_load();
  $geometry = geoPHP::load($entity['geom']);
  return $geometry->out('geohash');
}

/**
 * Returns an array of geohash prefixes numbered by length.
 *
 * see http://stackoverflow.com/questions/11319465/geoclusters-in-solr/11321723#11321723
 *
 * example:
 *   1_u
 *   2_u2
 *   3_u2s
 *   ...
 */
function geocluster_geofield_geohash_geocluster_index_property_get_callback($entity, array $options, $name, $type, $info) {
  $geohash = geocluster_geofield_geohash_property_get_callback($entity, $options, $name, $type, $info);
  // Output an specifc geohash prefix by the specified length.
  if (isset($info['geohash length'])) {
    $length = min($info['geohash length'], strlen($geohash));
    return substr($geohash, 0, $length);
  }
  // No length specified.
  // Output an array of all geohash prefixed numbered by their length.
  $geohash_index = array();
  for ($i = strlen($geohash); $i > 0; $i--) {
    $geohash_index[] = $i . '_' . substr($geohash, 0, $i);
  }
  return $geohash_index;
}
